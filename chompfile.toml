version = 0.1
default-task = 'build'

extensions = ['chomp@0.1:npm', 'chomp@0.1:footprint', 'chomp@0.1:terser']

[env-default]
WASI_PATH = './wasi-sdk-20.0'

[[task]]
name = 'build'
deps = ['dist/lexer.js', 'dist/lexer.cjs', 'types/lexer.d.ts', 'lexer.js']

[[task]]
target = 'lexer.js'
run = './scripts/build.js'

[[task]]
name = 'bench'
serial = true
deps = ['bench:js', 'bench:wasm']

[[task]]
name = 'bench:wasm'
deps = ['dist/lexer.js']
env = { BENCH = 'wasm' }
run = 'node --expose-gc bench/index.js'

[[task]]
target = 'dist/lexer.cjs'
deps = ['dist/lexer.js']
run = 'babel dist/lexer.js | terser -c -m -o dist/lexer.cjs'

[[task]]
name = 'build:swc'
target = 'src/lexer.js'
dep = 'src/lexer.ts'
# Note we should use the chomp swc template, but
# https://github.com/swc-project/cli/issues/113 means we always get a sourcemap
# even when we set "source-maps = false", so for now we have ejected the
# template to its raw "run" command, and added an "rm" step.
run = '''
node ./node_modules/@swc/cli/bin/swc.js $DEP -o $TARGET --no-swcrc -C jsc.parser.syntax=typescript -C jsc.parser.importAssertions=true -C jsc.parser.topLevelAwait=true -C jsc.parser.importMeta=true -C jsc.parser.privateMethod=true -C jsc.parser.dynamicImport=true -C jsc.target=es2016 -C jsc.experimental.keepImportAttributes=true
'''

[[task]]
# Note swc does not support emitting typings
# (https://github.com/swc-project/swc/issues/657), so while swc is used to
# generate the .js file, tsc is still needed to generate the d.ts file.
name = 'build:types'
target = 'types/lexer.d.ts'
dep = 'src/lexer.ts'
run = '''
  tsc --strict --declaration --emitDeclarationOnly --outdir types src/lexer.ts
'''

[[task]]
target = 'dist/lexer.js'
deps = ['src/lexer.js', 'lib/lexer.wasm', 'package.json']
engine = 'node'
run = '''
	import { readFileSync, writeFileSync } from 'fs';
	import { minify } from 'terser';

	const wasmBuffer = readFileSync('lib/lexer.wasm');
	const jsSource = readFileSync('src/lexer.js', 'utf8');
	const pjson = JSON.parse(readFileSync('package.json', 'utf8'));

	const jsSourceProcessed = jsSource.replace('WASM_BINARY', wasmBuffer.toString('base64'));

	const { code: minified } = await minify(jsSourceProcessed, {
		module: true,
		output: {
			preamble: `/* es-module-lexer ${pjson.version} */`
		}
	});

	writeFileSync('dist/lexer.js', minified ? minified : jsSourceProcessed);
'''

[[task]]
target = 'lib/lexer.wasm'
deps = ['src/lexer.h', 'src/lexer.c']
run = """
	${{ WASI_PATH }}/bin/clang src/lexer.c --sysroot=${{ WASI_PATH }}/share/wasi-sysroot -o lib/lexer.wasm -nostartfiles \
	"-Wl,-z,stack-size=13312,--no-entry,--compress-relocations,--strip-all,\
	--export=parse,--export=sa,--export=e,--export=ri,--export=re,--export=is,--export=ie,--export=ss,--export=ip,--export=se,--export=ai,--export=id,--export=es,--export=ee,--export=els,--export=ele,--export=f,--export=ms,--export=__heap_base" \
	-Wno-logical-op-parentheses -Wno-parentheses \
	-Oz
"""

[[task]]
name = 'test'
deps = ['dist/lexer.js', 'lexer.ts']
run = 'mocha test/*.ts --exit'

[[task]]
name = 'footprint'
deps = ['dist/lexer.js']
template = 'footprint'
